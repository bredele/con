{
  "name": "datastore",
  "version": "1.0.0",
  "description": "Store component is a single wrapper for your data models and collections.",
  "main": "index.js",
  "directories": {
    "example": "examples"
  },
  "dependencies": {
    "bredele-clone": "^0.3.1",
    "bredele-each": "^0.1.2",
    "component-emitter": "~1.1.2"
  },
  "devDependencies": {
    "zuul": "~1.5.4",
    "mocha": "~1.12.1"
  },
  "browser": {
    "emitter": "component-emitter",
    "each": "bredele-each",
    "clone": "bredele-clone"
  },
  "scripts": {
    "test": "zuul -- test/*.js",
    "test-local": "zuul --local -- test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bredele/store.git"
  },
  "keywords": [
    "model",
    "collections",
    "store",
    "data",
    "localStorage",
    "mvc",
    "mvvm",
    "object"
  ],
  "author": {
    "name": "Olivier Wietrich",
    "email": "olivier.wietrich@gmail.com",
    "url": "http://github.com/bredele"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bredele/store/issues"
  },
  "readme": "# store\n\n[![Build Status](https://travis-ci.org/bredele/store.png?branch=master)](https://travis-ci.org/bredele/store)\n\n  Store component is a single wrapper for your models and collections.\n\n  > Some front end framework provide collections which are basically ordered sets of models (or arrays of objects) with no extra features. Store removes this overhead and helps you focus on your data instead of maintaining something useless.\n\n  Store contains your data and all the logic surrounding it such as formatters, access control, computed properties, reset, local storage and can be easily extended with its [middleware engine](https://github.com/bredele/store#usefn).\n\n\n## Installation\n\ncomponent:\n\n    $ component install bredele/store\n\nnodejs:\n\n    $ npm install bredele-store\n    \n## Browser Support\n\nStore supports all mainstream browsers from IE8+.\nSupports IE7 with JSON polyfill.\n\n## API\n\n### store(data)\n\n  Create a new store with the given `data` (Object or Array).\n\n```js\nvar Store = require('store');\nvar users = new Store([{\n  name : 'eric'\n},{\n  name : 'olivier'\n}]);\n```\n\n### .set(name, data)\n\n Set an attribute `name` with data object.\n\nobject store:\n```js\nstore.set('nickname','bredele');\n```\n\narray store:\n```js\nstore.set(0,{\n  name : 'amy'\n});\n```\n\n  Emits `change` event with `name, value, previous value`.<br>\n  Emits `change name` event with `value, previous value`.\n\n Or update a store with an object of same type:\n\nobject store:\n```js\nstore.set({\n  nickname: 'olivier',\n  lastname: 'wietrich'\n});\n```\n\narray store:\n```js\n//update 0\nstore.set([{\n  name: 'olivier',\n  github: 'bredele'\n}]);\n```\n\n### .get(name)\n\n Get an attribute `name`.\n\nobject store:\n```js\nstore.get('nickname');\n```\n\narray store:\n```js\nstore.get(0);\n```\n\n### .del(name)\n\n Delete a store attribute.\n\n```js\nstore.del('nickname');\n```\n\n  Emits `deleted` event with `name`.<br>\n  Emits `deleted name` event.\n\n\n### .on(name, fn)\n\n  Listen events on Store.\n\n```js\nstore.on('change', function(name, val, previous) {\n  ...\n});\n```\n\n### .compute(name, fn)\n\n Compute store properties into a new property.\n\n```js\nstore.compute('id', function(){\n  return this.nickname + this.firstname;\n});\n```\n\n Compute listen for changes on the computed properties and update automatically\n the new property.\n\n\n### .format(name, fn)\n\n  Format an attribute output in Store.\n\n```js\nstore.format('nickname', function(val) {\n  return 'hello ' + val;\n});\n\nstore.get('nickname'); //hello bredele\n```\n\n### .pipe(store)\n\n  Pipe two stores.\n\n```js\n//update child with store\nstore.pipe(child);\n\nstore.set('name', 'olivier');\nchild.get('name'); //olivier\n```\n Listen for changes and update both stores.\n\n### .reset(data)\n\n  Reset store with `data` (Object or Array).\n\n```js\nstore.reset([]);\n```\n\n  Emits `change` and/or `deleted` events. \n  \n### .local(name)\n\n  Synchronize store with local storage.\n\n```js\nstore.local('mystore'); //reset with localstorage\n...\nstore.local('mystore', true); //save in localstorage\n```\n\n### .use(fn)\n\n  Use middleware to extend store.\n\n```js\nstore.use(function(obj) {\n  obj.save = function() {\n    //send to server\n  };\n});\n...\nstore.save();\n```\n\nSee [plugins](#plugins)\n\n## Plugins\n\nHere's a list of availaible plugins:\n\n  - [mirror](http://github.com/bredele/store-mirror)\n\nto get real time updates from a store in server side.\n\n```js\n  store.use(mirror('mychannel'));\n  store.set('hello', 'world');\n```\n  \n  - [path](http://github.com/bredele/store-path)\n\nto access nested data easily:\n\n```js\n  store.path('country.canada'); //get\n  store.path('country.canada.city', 'calgary');//set\n```\n\n  - [supplant](http://github.com/bredele/store-supplant)\n\nto create template engines on both client/server sides:\n\n```js\n  store.filter('upper', function(str) {\n    return str.toUpperCase();\n  });\n  store.supplant('my name is {{name} | upper}');\n```\n\n  - [queue](http://github.com/bredele/emitter-queue)\n\nto queue events.\n\n```js\n  store.queue('hello', 'world');\n  store.on('hello', function(val) {\n    //world\n  });\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Olivier Wietrich <olivier.wietrich@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/bredele/store",
  "_id": "datastore@1.0.0",
  "_from": "datastore@"
}
