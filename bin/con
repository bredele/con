#!/usr/bin/env node


/**
 * Module dependencies.
 * @api private
 */

var fs = require('fs');
var read = fs.readFileSync;
var write = fs.writeFileSync;
var resolve = require('path').resolve;
var program = require('commander');
var utils = require('../utils/utils');
var command = require('./command');
var pretty = require('prettyjson');
var Emitter = require('component-emitter');
require('emitter-queue')(Emitter.prototype);


/**
 * files and commands.
 */

var commands = [
 'get',
 'set',
 'enable',
 'disable',
 'path',
 'bump'
];
var files = ['package.json', 'component.json', 'bower.json'];



/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('[<file>]');



/**
 * Examples.
 */

program.on('--help', function () {
  console.log('  Examples:');  
  console.log();
  console.log('    # get name attribute:');
  console.log('    $ con file.json get name');
  console.log();
  console.log('    # set name attribute:');
  console.log('    $ con file.json set name bredele');
  console.log();
  console.log('    # enable awesome attribute:');
  console.log('    $ con file.json enable awesome');
  console.log();
  console.log('    # disable awesome attribute:');
  console.log('    $ con file.json disable awesome');
  console.log();
  console.log('    # bump version');
  console.log('    $ con file.json bump');


});


/**
 * Parse.
 */

program.parse(process.argv);



/**
 * Settings.
 */

var error = new Emitter();
var name = program.args[0];
var cmd = name;
var params = program.args;

if(!~commands.indexOf(name)) {
  files = [name];
  cmd = program.args[1];
  params.shift();
}

files.forEach(function(val) {
  var path = resolve('.', val);

  try {
    var file = require(path);
  } catch (e) {
    return error.queue('error', val);
  }

  if(commands.indexOf(cmd) > -1) {
    console.log();
    write(path, command.apply(null, [file, val].concat(params)));
    console.log();
  } 
});
error.on('error', function(name) {
  utils.warn('warning', name + " doesn't exist");
});
console.log();
process.exit();


